# guess default paths for Windows / VC
set(LATEST_QT_VERSION "5.10.0")

if (CMAKE_SIZEOF_VOID_P EQUAL 8)
	set(lslplatform 64)
else()
	set(lslplatform 32)
endif()

# Boost autoconfig:
# Original author: Ryan Pavlik <ryan@sensics.com> <ryan.pavlik@gmail.com
# Released with the same license as needed to integrate into CMake.
# Modified by Chadwick Boulay Jan 2018

if(APPLE AND NOT Qt5_DIR)
	set(Qt5_DIR "/usr/local/opt/qt/lib/cmake/Qt5") #"$(brew --prefix qt5)/lib/cmake/Qt5"
endif()

if(MSVC)
	if (CMAKE_SIZEOF_VOID_P EQUAL 8)
		set(lslplatform 64)
	else()
		set(lslplatform 32)
	endif()

	# see https://cmake.org/cmake/help/latest/variable/MSVC_VERSION.html
	if(MSVC_VERSION EQUAL 1500)
		set(VCYEAR 2008)
	elseif(MSVC_VERSION EQUAL 1600)
		set(VCYEAR 2010)
	elseif(MSVC_VERSION EQUAL 1700)
		set(VCYEAR 2012)
	elseif(MSVC_VERSION EQUAL 1800)
		set(VCYEAR 2013)
		set(_vs_ver 12.0)
	elseif(MSVC_VERSION EQUAL 1900)
		set(VCYEAR 2015)
		set(_vs_ver 14.0)
	elseif(MSVC_VERSION GREATER 1910 AND MSVC_VERSION LESS 1919)
		set(VCYEAR 2017)
		set(_vs_ver 14.1)
	else()
		message(WARNING "You're using an untested Visual C++ compiler.")
	endif()
	if(not ${_vs_ver})
		message(WARNING "You're using an untested Visual C++ compiler.")
	endif()

	if(NOT Qt5_DIR)
		set(Qt5_DIR "C:/Qt/${LATEST_QT_VERSION}/msvc${VCYEAR}_${lslplatform}/lib/cmake/Qt5")
		message(STATUS "You didn't specify a Qt5_DIR. I'm guessing it's ${Qt5_DIR}.")
		message(STATUS "If you are building Apps that require Qt and if this is wrong then please add the correct dir with -DQt5_DIR=/path/to/Qt5/lib/cmake/Qt5")
	endif()
endif()

if(MSVC AND NOT BOOST_ROOT AND NOT Boost_INCLUDE_DIR AND NOT Boost_LIBRARY_DIR)
	message(STATUS "Attempting to find Boost, whether or not you need it.")
	set(_libdir "lib${lslplatform}-msvc-${_vs_ver}")
	set(_haslibs)
	if(EXISTS "c:/local")
		file(GLOB _possibilities "c:/local/boost*")
		list(REVERSE _possibilities)
		foreach(DIR ${_possibilities})
			if(EXISTS "${DIR}/${_libdir}")
				list(APPEND _haslibs "${DIR}")
			endif()
		endforeach()
		if(_haslibs)
			list(APPEND CMAKE_PREFIX_PATH ${_haslibs})
			find_package(Boost QUIET)
			if(Boost_FOUND AND NOT Boost_LIBRARY_DIR)
				set(BOOST_ROOT "${Boost_INCLUDE_DIR}" CACHE PATH "")
				set(BOOST_LIBRARYDIR "${Boost_INCLUDE_DIR}/${_libdir}" CACHE PATH "")
			endif()
		endif()
	endif()
endif()
if(NOT BOOST_ROOT)
	message(STATUS "Did not find Boost. If you need it then set BOOST_ROOT and/or BOOST_LIBRARYDIR")
endif()
